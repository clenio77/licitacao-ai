"""
Endpoints da API para gest√£o de requisi√ß√µes de an√°lise.
Permite criar, consultar e gerenciar requisi√ß√µes de an√°lise de licita√ß√µes.
"""

from fastapi import APIRouter, Depends, HTTPException, BackgroundTasks
from sqlalchemy.orm import Session
from typing import List, Optional
from datetime import datetime
import json
import uuid

from api.database import get_db
from pydantic import BaseModel

# Router para endpoints de requisi√ß√µes
router = APIRouter(prefix="/api/requisicoes", tags=["Requisi√ß√µes de An√°lise"])

# Modelos Pydantic para requests
class RequisicoesAnaliseRequest(BaseModel):
    tipo_analise: str  # 'juridica', 'mercado', 'risco', 'cambial', 'completa'
    prioridade: str = "media"  # 'baixa', 'media', 'alta', 'urgente'
    observacoes: Optional[str] = None
    licitacoes_ids: List[str] = []
    setor_solicitante: Optional[str] = None
    usuario_solicitante: Optional[str] = None

class RequisicoesAnaliseResponse(BaseModel):
    id: str
    tipo_analise: str
    prioridade: str
    status: str
    data_criacao: datetime
    data_conclusao: Optional[datetime] = None
    resultados: Optional[dict] = None
    observacoes: Optional[str] = None

# Simula√ß√£o de banco de dados em mem√≥ria (em produ√ß√£o usaria banco real)
requisicoes_db = {}

@router.post("/", response_model=RequisicoesAnaliseResponse)
async def criar_requisicao(
    requisicao: RequisicoesAnaliseRequest,
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db)
):
    """
    Cria uma nova requisi√ß√£o de an√°lise para licita√ß√µes.
    
    Args:
        requisicao: Dados da requisi√ß√£o
        background_tasks: Para processamento em background
        db: Sess√£o do banco de dados
    
    Returns:
        RequisicoesAnaliseResponse: Dados da requisi√ß√£o criada
    """
    try:
        # Gerar ID √∫nico
        requisicao_id = str(uuid.uuid4())
        
        # Criar objeto de requisi√ß√£o
        nova_requisicao = {
            "id": requisicao_id,
            "tipo_analise": requisicao.tipo_analise,
            "prioridade": requisicao.prioridade,
            "status": "pendente",
            "data_criacao": datetime.now(),
            "data_conclusao": None,
            "resultados": None,
            "observacoes": requisicao.observacoes,
            "licitacoes_ids": requisicao.licitacoes_ids,
            "setor_solicitante": requisicao.setor_solicitante,
            "usuario_solicitante": requisicao.usuario_solicitante
        }
        
        # Salvar na "base de dados"
        requisicoes_db[requisicao_id] = nova_requisicao
        
        # Iniciar processamento em background
        background_tasks.add_task(
            processar_requisicao_analise,
            requisicao_id,
            requisicao.tipo_analise,
            requisicao.licitacoes_ids
        )
        
        return RequisicoesAnaliseResponse(**nova_requisicao)
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao criar requisi√ß√£o: {str(e)}")

@router.get("/{requisicao_id}", response_model=RequisicoesAnaliseResponse)
def obter_requisicao(requisicao_id: str):
    """
    Obt√©m uma requisi√ß√£o espec√≠fica pelo ID.
    
    Args:
        requisicao_id: ID da requisi√ß√£o
    
    Returns:
        RequisicoesAnaliseResponse: Dados da requisi√ß√£o
    """
    if requisicao_id not in requisicoes_db:
        raise HTTPException(status_code=404, detail="Requisi√ß√£o n√£o encontrada")
    
    requisicao = requisicoes_db[requisicao_id]
    return RequisicoesAnaliseResponse(**requisicao)

@router.get("/", response_model=List[RequisicoesAnaliseResponse])
def listar_requisicoes(
    skip: int = 0,
    limit: int = 100,
    status: Optional[str] = None,
    tipo_analise: Optional[str] = None
):
    """
    Lista requisi√ß√µes com filtros opcionais.
    
    Args:
        skip: Registros a pular (pagina√ß√£o)
        limit: Limite de registros
        status: Filtro por status
        tipo_analise: Filtro por tipo de an√°lise
    
    Returns:
        List[RequisicoesAnaliseResponse]: Lista de requisi√ß√µes
    """
    requisicoes = list(requisicoes_db.values())
    
    # Aplicar filtros
    if status:
        requisicoes = [r for r in requisicoes if r["status"] == status]
    
    if tipo_analise:
        requisicoes = [r for r in requisicoes if r["tipo_analise"] == tipo_analise]
    
    # Ordenar por data de cria√ß√£o (mais recente primeiro)
    requisicoes.sort(key=lambda x: x["data_criacao"], reverse=True)
    
    # Aplicar pagina√ß√£o
    requisicoes = requisicoes[skip:skip+limit]
    
    return [RequisicoesAnaliseResponse(**r) for r in requisicoes]

@router.put("/{requisicao_id}/status")
def atualizar_status_requisicao(
    requisicao_id: str,
    novo_status: str,
    observacoes: Optional[str] = None
):
    """
    Atualiza o status de uma requisi√ß√£o.
    
    Args:
        requisicao_id: ID da requisi√ß√£o
        novo_status: Novo status
        observacoes: Observa√ß√µes sobre a mudan√ßa
    
    Returns:
        dict: Confirma√ß√£o da atualiza√ß√£o
    """
    if requisicao_id not in requisicoes_db:
        raise HTTPException(status_code=404, detail="Requisi√ß√£o n√£o encontrada")
    
    requisicao = requisicoes_db[requisicao_id]
    status_anterior = requisicao["status"]
    
    # Atualizar status
    requisicao["status"] = novo_status
    
    # Se conclu√≠da, definir data de conclus√£o
    if novo_status == "concluida":
        requisicao["data_conclusao"] = datetime.now()
    
    # Atualizar observa√ß√µes se fornecidas
    if observacoes:
        requisicao["observacoes"] = observacoes
    
    return {
        "sucesso": True,
        "requisicao_id": requisicao_id,
        "status_anterior": status_anterior,
        "status_atual": novo_status,
        "data_atualizacao": datetime.now().isoformat()
    }

@router.delete("/{requisicao_id}")
def cancelar_requisicao(requisicao_id: str):
    """
    Cancela uma requisi√ß√£o de an√°lise.
    
    Args:
        requisicao_id: ID da requisi√ß√£o
    
    Returns:
        dict: Confirma√ß√£o do cancelamento
    """
    if requisicao_id not in requisicoes_db:
        raise HTTPException(status_code=404, detail="Requisi√ß√£o n√£o encontrada")
    
    requisicao = requisicoes_db[requisicao_id]
    
    # Verificar se pode ser cancelada
    if requisicao["status"] in ["concluida", "cancelada"]:
        raise HTTPException(
            status_code=400, 
            detail="Requisi√ß√£o j√° foi conclu√≠da ou cancelada"
        )
    
    # Cancelar requisi√ß√£o
    requisicao["status"] = "cancelada"
    requisicao["data_conclusao"] = datetime.now()
    
    return {
        "sucesso": True,
        "requisicao_id": requisicao_id,
        "status": "cancelada",
        "data_cancelamento": datetime.now().isoformat()
    }

# Fun√ß√£o para processar requisi√ß√£o em background
async def processar_requisicao_analise(
    requisicao_id: str,
    tipo_analise: str,
    licitacoes_ids: List[str]
):
    """
    Processa uma requisi√ß√£o de an√°lise em background.
    
    Args:
        requisicao_id: ID da requisi√ß√£o
        tipo_analise: Tipo de an√°lise solicitada
        licitacoes_ids: IDs das licita√ß√µes para an√°lise
    """
    try:
        print(f"üîÑ Processando requisi√ß√£o {requisicao_id} - Tipo: {tipo_analise}")
        
        # Simular processamento
        import asyncio
        await asyncio.sleep(2)  # Simular tempo de processamento
        
        # Atualizar status para processando
        if requisicao_id in requisicoes_db:
            requisicoes_db[requisicao_id]["status"] = "processando"
        
        # Simular mais processamento
        await asyncio.sleep(3)
        
        # Simular resultados
        resultados = {
            "tipo_analise": tipo_analise,
            "licitacoes_analisadas": len(licitacoes_ids),
            "resumo": f"An√°lise {tipo_analise} conclu√≠da para {len(licitacoes_ids)} licita√ß√µes",
            "data_processamento": datetime.now().isoformat()
        }
        
        # Atualizar requisi√ß√£o com resultados
        if requisicao_id in requisicoes_db:
            requisicoes_db[requisicao_id]["status"] = "concluida"
            requisicoes_db[requisicao_id]["resultados"] = resultados
            requisicoes_db[requisicao_id]["data_conclusao"] = datetime.now()
        
        print(f"‚úÖ Requisi√ß√£o {requisicao_id} processada com sucesso")
        
    except Exception as e:
        print(f"‚ùå Erro ao processar requisi√ß√£o {requisicao_id}: {str(e)}")
        
        # Atualizar status para erro
        if requisicao_id in requisicoes_db:
            requisicoes_db[requisicao_id]["status"] = "erro"
            requisicoes_db[requisicao_id]["data_conclusao"] = datetime.now()
            requisicoes_db[requisicao_id]["observacoes"] = f"Erro no processamento: {str(e)}"